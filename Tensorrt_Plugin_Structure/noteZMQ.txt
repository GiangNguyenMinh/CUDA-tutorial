*************** Basics **************
// trong C message chứa \0, cần chú ý khích thước message gửi đi --> sử dungjk zhelpers.h

## PUB-SUB
// "slow join" 
// khi sử dụng tcp transport sẽ mất thời gian để handshaking trong thời gian này thì publisher vẫn send message trong khi subscriber chỉ sẵn sàng đọc khi kết nối hoàn thành nên dẫn đến mất message --> synchoronize pub and sub để không publish data cho đến khi sub được kết nối và sẵn sàng
// một sub có thể kế nối nhiều hơn một pub. Data sẽ vào xen kẽ nhau (fair queue) để không một pub nào lấn át
// nếu pub không được connect sub thì nó đơn giản là drop tất cả message 
## Parallel pipeline 
// cần synchoronize điểm bắt đầu của batch với tất cả các worker đang hoạt động. Nếu không dẫn đến việc mất cân bằng dẫn đến không thể chạy song song


*************** Socket and Patterns ****************
inproc giao thức dùng để gửi message giao tiếp giữa các thread 
## Message 
PUB-SUB
PUB-PULL
// ZMQ sockets chứa message như UDP chứ không phải một luồng bytes như TCP, message là một dữ liệu nhị phân có độ dài được chỉ định.
zmq_ctx_set(): set number of thread I/O, send queue message for thread I/O send asynchronously
--------------------------
int io_threads = 4;
void *context = zmq_ctx_new ();
zmq_ctx_set (context, ZMQ_IO_THREADS, io_threads);
assert (zmq_ctx_get (context, ZMQ_IO_THREADS) == io_threads);
--------------------------

zmq_setsockopt: set filter
send multipart message by set a "more" bit to one 
// Mỗi message có 1 hoặc nhiều part 
// Mỗi part được gọi là frame 
// Mỗi part là một zmq_msg_t object 
// Có thể send và recv mỗi part một cách riêng biệt bằng low-level API
// Higher-level APIs cung cấp đóng gói và gửi toàn bộ multipart message 

// có thể gửi message có độ dài bằng 0, VD gửi signal từ thread này đến thread khác 
// ZMQ đảm bảo gửi tất cả các parts của một message, hoặc là không gửi phần nào
// ZMQ không gửi tin nhắn một cách ngay lập tức, mà vào một thời gian không xác định nào đó, vì thế multipart message phải fit in memory 
// Vì mesage phải được fit trong memory nên nếu muốn send một file với kích thước bất kì phải break nó thành các pieces và send mỗi piece như một single-part message riêng biệt. Sử dụng multipart data không làm giảm bộ nhớ tiêu tốn. 
// Phải call zmq_msg_close() khi kết thúc một received message


## Multiple Sockets 
// có thể connect 1 socket tới nhiều endpoint để đọc multiple endpoint cùng một lúc. Điều này là có thể khi những remote endpoints có cùng pattern (các message ở các endpoint có format giống nhau), nhưng nó sẽ không được phép nếu kết nối PULL socket tới PUB endpoint. 
// Đọc message với multiple sockets trong một lần sử dụng zmq_poll(), tránh nhưng socket được ưu tiên được đọc trước các socket khác
------------------------------------------
typedef struct {
    void *socket;       //  ZeroMQ socket to poll on
    int fd;             //  OR, native file handle to poll on
    short events;       //  Events to poll on
    short revents;      //  Events returned after poll
} zmq_pollitem_t;
------------------------------------------


## Multiple Message
// send message với multipart sử dụng cờ sndmore (or ZMQ_SNDMORE), mỗi part là 1 đối tượng zmq_msg lên bao nhiêu part thì phải send bằng đấy lần
// khi đọc thì đọc như single message trong vòng loop và phải check last message frame bằng zmq_msg_more()
// khi gửi multipart thì first part chỉ được thực sự gửi lên wire khi mà gửi final part
// khi sử dụng zmq_poll(), khi nhận được first part của một message thì phân còn lại của message cũng sẽ đảm bảo nhận được 
// Một khi đã nhận được mesage sẽ nhận được toàn bộ part hoặc là sẽ không nhận được phần nào
// sẽ nhận được tất cả các part của message dù có check thuộc tính "more" hay không
// Khi gửi ZMQ sẽ queue message frame trong bộ nhớ cho đến khi cái cuối cùng rồi mới send chúng 
// Không có cách nào để hủy gửi tin nhắn đã được gửi một phần trừ khi close socket 


## Dynamic discovery 
Trong trường hợp mô hình pub-sub thông thường thì publisher thường là static còn sub dynamic 
Muốn dynamic cả 2 thì phải dùng intermediaries 
## Pub-Sub with Proxy 
// Tạo ra một intermediaries ở middle của network 
ZMQ build-in proxy Function: zmq_proxy(frontend, backend, capture); 
Trong đó frontend, backend là các socket (thông thường sẽ dùng proxy với các dạng ROUTER/DEALER, XSUB/XPUB, or PULL/PUSH) 
-----------------------------------------
#include "zhelpers.hpp"

int main (int argc, char *argv[])
{
    zmq::context_t context(1);

    //  Socket facing clients
    zmq::socket_t frontend (context, ZMQ_ROUTER);
    frontend.bind("tcp://*:5559");

    //  Socket facing services
    zmq::socket_t backend (context, ZMQ_DEALER);
    backend.bind("tcp://*:5560");

    //  Start the proxy
    zmq::proxy(static_cast<void*>(frontend),
               static_cast<void*>(backend),
               nullptr);
    return 0;
}
---------------------------------------


## Bridge (internal network, external network)  

...


## Handle Error và ETERM
// Phương thức tạo object sẽ return NULL nếu fail 
// Phương thức xử lý data có thể return số lượng bytes đã xử lý, hoặc -1 nếu error hoặc fail 
// Một số phương thức khác trả về 0 và -1 khi error hoặc fail 
// error code được cung cấp trong errno hoặc zmq_errno() 
// các miêu tả về error cho logging được cung cấp bởi zmq_strerror() 
// khi code recv một message với ZMQ_DONTWAIT option vào không đợi data, ZMQ sẽ trả về -1 và errono == EAGAIN 
// khi một thread gọi zmq_ctx_destroy(), và các thread khác vẫn đang khóa hoạt động, zmq_ctx_destroy() sẽ đóng context và tất cả các khóa sẽ trả về -1 và errono == ETERM 
--> sử dụng assert() để catch và dùng chương trình (...use) 


## Parallel pipeline with Kill signal (pipeline example in document) 
Sử dụng multi socket cho đầu vào worker 
// Sink tạo ra một PUB socket trên một endpoint mới (bind)
// Các worker kết input socket với endpoint 
// khi sink phát hiện ra end of batch nó sẽ gửi một kill đến PUB socket dùng s_send (controller, "KILL") của zhelpers.h
// khi worker phát hiện được kill message đó thì nó sẽ exits


## Handle interrupt Signals
Tạo một hàm sử lý tín hiệu (signal.h) 
Khởi tạo structure sigaction để catch và tự động sử lý với các tín hiệu chỉ định 
// Khi code đang được khoá trong một blocking call (đang gửi message, đang nhận một message, đang poll), khi có một tín hiệu gửi đến, call sẽ trả về EINTR
// s_recv () trả là NULL nếu chúng interrupted 
để check một EINTR return code, một NULL return, và/hoặc một tín hiệu trả ra từ hàm xử lý tín hiệu vd s_interrupted
----------------------------------------- 
s_catch_signals ();
client = zmq_socket (...);
while (!s_interrupted) {
    char *message = s_recv (client);
    if (!message)
        break;          //  Ctrl-C used
}
zmq_close (client);
----------------------------------------


## Dectectin memory leaks 
Sử dụng valgrind 


## multithreading with ZMQ
// Cô lập dữ liệu riêng tư trong thread và không chia sẻ dữ liệu với các thread khác. Chỉ có ngoại lệ là ZMQ contexts
// tránh xa những cơ chế đồng thời cổ điển như mutexes, critical sections, semaphores. 
// Tạo ZMQ context lúc bắt đầu của process, và pass nó vào tất cả các threads cần để connect thông qua inproc sockets. 
// Sử dụng attached threads để tạo structure trong ứng dụng, và connect chúng với parent threads sử dụng PAIR socket trên inproc. Mô hình là: bind parent socket, sau đó tạo các child thread kết nối với socket của nó 
// sử dụng detached threads để mô phỏng nhiêm vụ độc lập với contexts của chúng. Kết nối trên tcp. Sau đó có thể chuyển chúng sáng quy trình độc lập mà không thay đổi nhiều code
// các giao tiếp giữa các threads diễn ra dưới dạng message. Có thể define ít hoặc nhiều 
// không chia sẻ ZMQ socket giữa các threads ...
Chỉ sử dụng hoặc đóng socket trên thread tạo ra chúng 

server ...


## signaling between threads (PAIR Sockets)
sử dụng s_send() và inproc





...
## High-water marks
// Giải quyết vấn đề A gửi đến B quá nhiểu mà B không xử lý kịp (hay nói cách khác là không có giao tiếp giữa B với A)
// HWM định nghĩa công xuất của các đường ống bên trong nó. Mỗi connection vào hoặc ra một socket có một đường ống riêng của nó, HWM có thể send, và/hoặc gửi dựa và socket type. sockets (PUB, PUSH) chỉ có gửi buffer, (SUB, PULL, REQ, REP) chỉ nhận buffers, (DEALER, ROUTER, PAIR) có cả send và nhận
// v2.x là infinity là default, nó dễ dàng nhưng cũng dễ chết publishers. Ở v3.x set default là 1000, nếu dùng v2.x phải set HWM hoặc một con số khác liên quan đến message size
// khi socket đạt tới HWN, nó sẽ hoặc là block hoặc là drop data dựa vào socket types. PUB, ROUTER socket sẽ drop data; những socket còn lại sẽ block
// trên inproc transport sender và reciver sẽ chia sẻ chung buffers, nên HWM thực là tổng HWM được set ở cả 2 bên


## Missing message problem solver
// Ở SUB socket, set subscription sử dụng zmq_setsockopt() với ZMQ_SUBSCRIBE, nếu không thì sẽ không nhận được message. Bởi vì subscribe tới message bởi prefix, nếu subscribe tới "", sẽ nhận được bất cứ thứ gì
// nếu start SUB socket sau khi start PUB socket sẽ bị mất message trước khi kết nối 
// Thậm trí mếu synchronize SUB vòa PUB vẫn có khả năng mất message vì internal queues không được tạo ra cho đến khi sự kết nối giữa hai khối là hoàn toàn (trong ví dụ tcp) 
// Nếu sử dụng REP và REQ sockets, và không tuân thủ đồng bộ thứ tự gửi/nhận/gửi/nhận ZMQ sẽ dẫn đến errors, cái mà sẽ bị ignore. Sau đó sẽ giống như loss message. Phải chắc chắn thứ tự gửi/nhận và luôn luôn check errors trong ZMQ call
// Nếu xử dụng PUSH sockets, thì socket PULL đầu tiên được kết nối sẽ nhận được lượng message không công bằng. Sẽ phải mất vài milliseconds để cân bằng tỉ lệ message. Để thay thế cho PUSH/PULL với tốc độ dữ liệu thấp hơn, thì dùng ROUTER/DEALER sẽ cân bằng mẫu. 
// Nếu sử dụng inproc thì phải đảm cả 2 sockets ở cùng một context. Nếu không hướng kết nối sẽ bị thất bại. Phải bind trước thâu đó mới connect.
// Nếu sử dụng ROUTER socket, rất dễ bị mất message một cách vô tình do gửi frame không đúng định dạng (quên không gửi định dạng frame). Set ZMQ_ROUTER_MANDATORY option ở ROUTER sockets là một ý tưởng, nhưng vẫn phải check return code sau mỗi lần call send



*********************** Advanced Pub-Sub Patterns **************************************
## Pros and Cons of Pub-Sub
Pub-Sub giải quyết vấn dề tin nhắn cũ: multicast - tin nhắn đa hướng và group messaging tin nhắn nhóm 





























************************ Socket API ************************************ https://zeromq.org/socket-api/
*********************** Socket ZMQ ***************************************
// ZMQ socket thể hiện sự trừu tượng của một hàng đợi tin nhắn không đồng bộ, với ý nghĩa là xếp hàng chính xác tùy thuộc vào loại socket sử dụng.
// Các socket thông thường truyền các byte hoặc dữ liệu rời rạc thì các ZMQ socket sẽ truyền các message rời rạc.
// ZMQ socket là không đồng bộ có nghĩa là thời gian thiết lập kết nối vật lý và ngắt kết nối, kết nối lại và phân phối hiệu quả là minh bạch đối voies người dùng và do ZMQ tổ chức. Xa hơn là các messages có thể được queue trong trường hợp a peer(đối tượng ngang hàng) không có sẵn để nhận nó. 
// sockets thông thường chỉ cho phép mối quan hệ one-to-one (two peers), many-to-one(many clients, one server), hoặc trong một số trường hợp one-to-many(multicast). Với ngoại lệ PAIR sockets, ZMQ có thể kết nối tới nhiều endpoints, đồng thời chấp nhận các kết nối đến từ nhiều endpoints được liên kết với socket, dó đó cho phép mối quan hệ many-to-many


## Socket life time
4 parts: 
- Tạo và Xóa socket, đi cùng nhau tạo thành một vòng socket life 
- Config sockets bằng cách setting option trên chúng và kiểm tra chúng nếu cần thiết 
- Plugging sockets vào kiến trúc mạng bằng cách tạo ZMQ connections tới vào từ chúng 
- Sử dụng socket để mang dữ liệu bằng cách viết và nhận dữ liệu trong chúng 


## Bind và Connect 
// Với ZMQ sockets thì việc ai binds, ai connects không quan trọng. Thông thường thì server sẽ sử dụng bind còn client sẽ sử dụng connect 
// ZMQ tạo queue với mỗi kết nối cơ bản. VD nếu socket kết được kết nối với 3 peer sockets (ngang hàng) thì sẽ có 3 message queue đằng sau đó 
// Với bind, cho tất cả các peers kết nối tới, do đó không biết được có bao nhiêu peers sẽ được kết nối và không thể tạo queue trước. Thay vào đó queue sẽ được tạo khi mỗi peer rieeng lẻ được kết nối với sockets được ràng buộc (bound socket)
// Với Connect, nó biết sẽ có ít nhất một peer sẽ tới, nó sẽ tạo một queue ngay lập tức. Điều đó được áp dụng cho tất cả các socket ngoại trừ ROUTER (các queues chỉ được tạo ra sau khi peer mà được kết nối xác nhận kết nối đó. 
// Tóm lại, khi send một message tới một bound socket với no peers, hoặc một ROUTER với no live connections, sẽ không có quêu để lưu message. 
 
? Khi nào dùng bind và khi nào dùng connect
// Như một nguyên tắc chung thì bind sẽ đến từ hầu hết các điểm stable trong cấu trúc mạng, vào sử dụng connect từ những thành phần dynamic có endpoints dễ thay đổi. Đối với request/reply, người cũng cấp service sẽ là điểm bind còn clients sẽ sử dụng connect. 
// Nếu không tìm được phần nào stable hơn (peer-to-peer), xem xét một stable device ở middle, nơi mọi bên đều có thể kết nối tới. 


## High-Water-Mark
Là giới hạn cứng của số lượng lớn nhất của message đang dữ trong bộ nhớ cho một peer cái mà được chỉ định socket giao tiếp với (nói bên trên) 


## Message Pattern 
built-in:
- Request-reply
- Pub-sub
- Pipeline 
- Exclusive pair 
dự thảo: 
- client-sever
- ratio-dish


## Request-reply pattern 
R-r pattern được hướng tới kiến trúc sevice-oriented khác nhau
2 lại cơ bản: synchronous (REQ-REP socket), và asynchronous (DEALER-ROUTER socket), và có thể mix theo nhiều cách

++ REQ socket 
// Được sử dụng bởi một client để gửi yêu cầu tới và nhận replies từ service. Socket loại này chỉ cho phép một chuỗi các sends call và receive calls xen kẽ. Một REQ socket có thể được kết nối nhiều REP hoặc ROUTER sockets. Mỗi request sent được round-robined trong tất cả các service được kết nối, và mỗi reply nhận được sẽ khớp với yêu cầu được đưa ra gần nhất. Độ tin cập đối với failing peers không phải vấn đề. 
// Nếu không có services nào có sẵn, những hoạt động send trên socket sẽ block đến khi một service trở lên available. REQ sẽ không vứt bất kì message nào 
----------------------------------------------------------------
Compatible peer sockets     |  REP, ROUTER
Direction                   |  Bidirectional 
Send/receive pattern        |  Send, Receive, send, receive, ...
Outgoing routing strategy   |  Round-robin 
Incoming routing strategy   |  Last peer 
Action in mute state        |  Block 
----------------------------------------------------------------

++ REP socket 
// Được sử dụng bởi một service để nhận request và gửi replies tới client. Socket loại này chỉ cho phép một chuỗi các receice call và send calls xen kẽ. Mỗi request nhận được là một  fair-queued từ tất cả các clients, mỗi reply được gửi sẽ được chuyển đến client yêu cầu cuối cùng. Nếu requester gốc ban đầu không còn tồn tại nữa thì reply sẽ được âm thầm loại bỏ
---------------------------------------------------------------
Compatible peer sockets     |  REQ, DEALER 
Direction                   |  Bidirectional 
Send/receive pattern        |  Receive, send, receive, send ...
Outgoing routing strategy   |  Fair-robin  
Incoming routing strategy   |  Last peer 
---------------------------------------------------------------

++ DEALER socket 
// DEALER socket nói chuyện với một tập các anonymous peers, sending và receiving message sử dụng thuật toán round-robin. Rất đang tin cậy vì nó không làm mất message. DEALER làm việc như một sự thay thế không đồng bộ cho REQ, cho clients cái mà talk tới REP hoặc ROUTER server. Message nhận được từ DEALER là fair-queued từ tất cả các peers được kết nối. 
// Khi DEALER socket vào trạng thái mute state nguyên nhân là đạt vào high water mark, đối với all peers, hoặc không có peer nào thì tất cacr các hoạt động send trên socket sẽ block cho đến khi mute state kết thúc hoặc có ít nhất một peer trở lên sẵn sáng cho việc gửi. Message sẽ không bị xóa bỏ. 
// Khi DEALER socket được kết nối tới REP socket message gửi phải bao gồm một empty frame như là first part của message (dấu phân cách), theo sau là một hoặc nhiểu body parts

----------------------------------------------------------------
Compatible peer sockets     |  ROUTER, REP, DELAER
Direction                   |  Bidirectional 
Send/receive pattern        |  Unrestricted 
Outgoing routing strategy   |  Round-robin 
Incoming routing strategy   |  Fair-queued 
Action in mute state        |  Block 
----------------------------------------------------------------

++ ROUTER socket 
// ROUTER socket nói với set of peers, sử dụng địa chỉ cụ thể để mỗi outgoing message được gửi đi tới một peer connection chỉ định. ROUTER làm việc như một sự thay thế bất đồng bộ cho REP, và thường được sử dụng như một server cơ bản để nói chuyện với cả DEALẺ clients
// Khi nhận message một ROUTER socket sẽ thêm message part chứa routing id của original peer vào phần đầu của message trước khi gửi nó vào ứng dụng. Message nhân là fair-queued giữa các peer đang được connect. Khi send mesage ở ROUTER socket sẽ xóa first part của message và sử dụng nó để xác định routing id của peer message sẽ được route tới. Nếu peer không tồn tại nữa, hoặc không bao giờ tồn tại, message sẽ loại bỏ một cách âm thầm 
// Khi một ROUTER vào trạng thái mute state bởi vì với tới HWM. đối với tất cả các peers, sau khi message gửi tới socket sẽ bị dropped cho đến khi mute state ends. Tương tự như vậy, bất kì message nào routed tới một peer cái đạt tới HWM cũng sẽ bị dropped. 
// Khi một REQ socket được connect tới một ROUTER socket, ngoài routing id ở, mỗi message được nhận sẽ chứa thêm một message part trống (delimeter part). 
// Tóm lại structure của mỗi message nhận được sẽ trở thành: 
// --> 1 hoặc nhiều routing id part + delimiter part + 1 hoặc nhiều body part
// Khi send reply tới một REQ socket application sẽ bao gồm delimiter part 

----------------------------------------------------------------
Compatible peer sockets     |  REQ, ROUTER, DELAER
Direction                   |  Bidirectional 
Send/receive pattern        |  Unrestricted 
Outgoing routing strategy   |  trong mô tả  
Incoming routing strategy   |  Fair-queued 
Action in mute state        |  Drop (trong mô tả)
----------------------------------------------------------------


## Publish-subscribe pattern 
Mẫu publish-subscribe được sử dụng cho phân phối one-to-many, dữ liệu từ 1 publisher tới nhiều subcribers
Hỗ trợ Pub/Sub bằng các loại socket sau: 
- PUB 
- XPUB
- SUB 
- XSUB 

++ Topics 
ZMQ sử dụng multipart message để truyền tải thông tin chủ đề. Topics được thể hiện dưới dạng mảng của bytes, mặc dù có thể sử dụng string hoặc encode text phù hợp
Một publisher phải bao gồm topic trong frame đầu tiền của message, trước message payload. 

Exe: send message to "status" topic  
--------------------------------------------- Publisher -----------------------------------------
publisher.send(zmq::str_buffer("status"), zmq::send_flags::sndmore);  // fist part is topic 
publisher.send(zmq::str_buffer("Message in status"));                 // payload after
--------------------------------------------------------------------------------------------------

--------------------------------------------- Subscriber -----------------------------------------
subscriber.set(zmq::sockopt::subscribe, "status");

while(true){
    // Receive all parts of the message
    std::vector<zmq::message_t> recv_msgs;
    zmq::recv_result_t result = zmq::recv_multipart(subscriber, std::back_inserter(recv_msgs));
    assert(result && "recv failed");
    assert(*result == 2);

    std::cout << "Subscriber: [" << recv_msgs[0].to_string() << "] "
                  << recv_msgs[1].to_string() << std::endl;
    }
-----------------------------------------------------------------------------------------------------

// Một subscriber có thể có nhiều subscription filters
// Sử dụng prefix check topic (vs suber sub "topic" sẽ nhận được message topic, topic/subtopic, topical và sẽ không nhận được topi, TOPIC) 
// Nếu để là "" sẽ nhận được toàn bộ topic

++ PUB socket 
// PUB socket có thể được sử dụng bởi một publisher để phân phối dữ liệu. Message gửi được phân phối như một fan out đến tất cả các connected peers
// Loại socket này không thể nhận message 
// Khi một PUB socket vào trạng thái mute state vì HWM cho một subscriber, thì bất cứ message nào được gửi tới subscriber đó trong đề cập sẽ bị droped cho đến khi kết thúc mute state. Send function sẽ không bao giờ bị block bơi loại socket này 

----------------------------------------------------------------
Compatible peer sockets     |  SUB, XSUB 
Direction                   |  Unidirectional 
Send/receive pattern        |  Send only  
Outgoing routing strategy   |  Fan out 
Incoming routing strategy   |  N/A  
Action in mute state        |  Drop
----------------------------------------------------------------

++ SUB socket 
// Một SUB socket được sử dụng như một subscriber để subcribe tới dữ nhiệu được phân phối bởi publisher
// Khởi tạo một SUB socket không subscribe tới bất kì message nào
// Send function không được thực thi cho loại socket này 

----------------------------------------------------------------
Compatible peer sockets     |  PUB, XPUB 
Direction                   |  Unidirectional 
Send/receive pattern        |  Receive only  
Outgoing routing strategy   |  N/A
Incoming routing strategy   |  Fair-queue 
----------------------------------------------------------------

++ XPUB socket 
// Giống như PUB ngoại trừ có thể nhận subscriptions từ những peers dưới dạng tin nhắn đến.
// Subscripon message là một byte 1(cho subscriptions) hoặc byte 0 (cho unsubscriptions) theo sau là subscription body. Message mà không có sub/unsub prefix cũng được nhận, nhưng sẽ không có hiêu lực trong subsscrition status. 

----------------------------------------------------------------
Compatible peer sockets     |  ZMQ_SUB, ZMQ_XSUB 
Direction                   |  Unidirectional 
Send/receive pattern        |  Send messages, receive subscriptions   
Outgoing routing strategy   |  Fan out 
Incoming routing strategy   |  N/A  
Action in mute state        |  Drop
----------------------------------------------------------------

++ XSUB socket 
// Giống với SUB ngoại trừ có thể subscribe bằng cách send subscription message tới socket. 
// Subscripon message là một byte 1(cho subscriptions) hoặc byte 0 (cho unsubscriptions) theo sau là subscription body. Message mà không có sub/unsub prefix cũng được gửi, nhưng sẽ không có hiêu lực trong subsscrition status. 

----------------------------------------------------------------
Compatible peer sockets     |  ZMQ_PUB, ZMQ_XPUB 
Direction                   |  Unidirectional 
Send/receive pattern        |  Receive messages, send subscriptions   
Outgoing routing strategy   |  N/A 
Incoming routing strategy   |  Fair-queued  
Action in mute state        |  Drop
----------------------------------------------------------------

## Pipeline pattern 
Pipeline pattern hướng tới phân công việc, đặc trưng là một quy trình nhiều giai đoạn trong đó một hoặc vài node đẩy công việc cho nhiều công nhân, và họ sẽ push lại kết quả cho một hoặc nhiều collectors. Pattern này hầu như đáng tin cậy vì nó sẽ không bỏ message trừ khi một node ngắt kết nối bất ngờ. Nó có khả năng scale khi mà các node có thể join bất kì thời điểm nào. 
ZeroMQ sẽ support với 2 loại socket đó là: 
- PUSH 
- PULL 

++ PUSH socket 
// PUSH socket sẽ nói chuyện với tập các anonymous PULL peers
// Gửi message sử dụng round-robin
// không sử dụng hoạt động receive trong loại socket này 
// Khi một PUSH socket vào trạng thái mute state bởi HWM từ tất cả các nodes downstream, hoặc không có bất kì một downstream node nào, thì tất cả các send message trong socket sẽ bị block cho đến khi mute state kết thúc hoặc có ít nhất một downstream node có sẵn để sending. Message sẽ không bị bỏ đi 

----------------------------------------------------------------
Compatible peer sockets     |  PULL 
Direction                   |  Unidirectional 
Send/receive pattern        |  Send only   
Outgoing routing strategy   |  Round-robin 
Incoming routing strategy   |  N/A  
Action in mute state        |  Block 
----------------------------------------------------------------

++ PULL socket 
PULL socket nói chuyện với tập của anonymous PUSH peer, nhận message sử dụng fair-queue 

----------------------------------------------------------------
Compatible peer sockets     |  PUSH  
Direction                   |  Unidirectional 
Send/receive pattern        |  Receive only    
Outgoing routing strategy   |  N/A
Incoming routing strategy   |  Fair-queued  
Action in mute state        |  Block 
----------------------------------------------------------------
